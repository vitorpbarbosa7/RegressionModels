lista_numerico = list(1.9,45.3,300.5)
#Listas compostas
lista_composta1 = list("A",3, TRUE)
lista1 = list(1:10, c("Zico","Ronaldo", "Garrincha")
,rnorm(10))
lista1
?rnorm
# Slicing de listas
lista1[1]
lista1[2]
lista[[2]][1]
lista1[[2]][1]
lista[[2]][1] = "Monica"
lista1[[2]][1] = "Monica"
lista1[[2]][1]
# Para nomear os elementos
names(lista1) = c("inteiros","Caracteres",'Normal')
lista1
lista1$inteiros
lista1$Caracteres
lista1$Normal
plot(rnorm(100, mean = 2, sd = 1))
hist(rnorm(100, mean = 2, sd = 1))
plot(normal)
normal = rnorm(100, mean = 2, sd = 1)
plot(normal)
hist(normal)
normal = rnorm(1000, mean = 2, sd = 1)
plot(normal)
hist(normal)
normal = rnorm(10000, mean = 2, sd = 1)
plot(normal)
hist(normal)
# Comprimento da lista
length(lista1)
# Podemos extrair um elemento específico dentro de cada nível da lista
lista1$inteiros[1]
# Podemos extrair um elemento específico dentro de cada nível da lista
lista1$inteiros[2]
# Podemos extrair um elemento específico dentro de cada nível da lista
lista1$inteiros[3]
#Mode dos elementos
mode(lista1)
#Mode dos elementos
mode(lista1$inteiros)
# Combinando duas listas
lista3 = c(lista1, lista2)
# Combinando duas listas
lista2 = list('A',c(1,2,3),matrix(seq(1:4), nr = 2, nc = 2, byrow = TRUE))
lista3 = c(lista1, lista2)
lista3
# Transformando um vetor em lista
v = c(1:3)
v
l = as.list(v)
l
# Unindo 2 elementos de uma lista
mat = matrix(1:4, nr = 2)
# String
texto = 'Isso é uma string!'
texto
# String
texto = 'Isso é uma string!'
texto
x = as.character(3.14)
x
class(x)
# Concatenando Strings
nome = "Nelson"
sobrenome = 'Mandela'
paste(nome,sobrenome)
cat(nome, sobrenome)
# Formatar a saída
sprintf("A %s é nota %d",'Linguagem R',10)
# Extraindo parte da Strings
texto = 'Isso é uma string!'
substr(texto, start = 12, stop = 17)
# SUB STRINGS
?substr
# Extraindo parte da Strings
texto = 'Isso é uma string!'
# SUB STRINGS
?substr
substr(texto, start = 12, stop = 17) = "abcdef"
texto
# Contar o número de caracters
nchar(texto)
# ALterando a capitalação
tolower(texto)
toupper(texto)
# Usando stringr
library(stringr)
# strsplit
strsplit('Histogramas e Elementos de Dados', NULL)
# strsplit
listachar = strsplit('Histogramas e Elementos de Dados', NULL)
# strsplit
texto = 'Histogramas e Elementos de Dados'
listachar = strsplit(texto, NULL)
splitspace = strsplit(texto)
splitspace = strsplit(texto,' ')
splitspace
string2 = c('Precisamos testar outras strings - @???!&$',
"Análise de Dados em R")
string2
str_c(c(string1,string2), sep = "")
# strsplit
string1 = 'Histogramas e Elementos de Dados'
listachar = strsplit(texto, NULL)
splitspace = strsplit(texto,' ')
splitspace
string2 = c('Precisamos testar outras strings - @???!&$',
"Análise de Dados em R")
string2
str_c(c(string1,string2), sep = "")
str_count(string2,'s')
str_locate_all(string2, 's')
str_locate_all('ssaass', 's')
# STR replace
str_replace(string2, '\\s','')
grep1(pattern = padrao, x = string1)
# Detecando padrões nas strings
string1 = '17 jan 2001'
string2 = '1 jan 2001'
padrao = 'jan 20'
grepl(pattern = padrao, x = string1)
grepl(pattern = 'jan', x = string2)
rn(list=ls())
rm(list=ls())
ls()
df = data.frame()
df
class(df)
df
# Criando vetores vazios
nomes = character()
idades = numeric()
itens = numeric()
codigos = integer()
df = data.frame(c(nomes,idades,itens,codigos))
df
df
# Criando vetores
pais = c('Portugual', 'Inglaterra','Irlanda','Egito','Brasil')
nome = c('Bruno','Tiago','Amanda','Bianca','Marta')
altura = c(1.88,1.76,1.53,1.68,1.68)
# Criando vetores
pais = c('Portugual', 'Inglaterra','Irlanda','Egito','Brasil')
nome = c('Bruno','Tiago','Amanda','Bianca','Marta')
altura = c(1.88,1.76,1.53,1.68,1.68)
codigo = c(5001,2145,5876,1457,6587)
df = data.frame(c(pais,nome,altura,codigo))
df
df = data.frame(pais,nome,altura,codigo)
df
plot(df$altura,df$codigo)
# Adicionando um novoo vetor a um dataframe existente
olhos = c('verde','azul','azul','castanho','mel')
df = cbind(df,olhos)
df
# Informações sobre dataframe
str(df)
dim(df)
length(df)
# Extraindo um único valor
df[1,1]
# Número de linhas e colunas
nrow(df)
ncol(df)
# Primeiros elementos do dataframe
head(df)
# Últimos elementos
tail(df)
# Dataframes built in do R
mtcars
iris
# Filtro para um subset de dados que atendem um criterio
df[altura < 1.6]
# Filtro para um subset de dados que atendem um criterio
df[altura < 1.6,]
df[nome == 'Amanda',]
df[olhos == 'azul',]
df[olhos == 'mel',]
df[olhos == 'castanhos',]
df[olhos == 'castanho',]
?mtcars
?iris
# Data frames
escola <- data.frame(Aluno = c('Bob', 'Tereza', 'Marta', 'Felipe', 'Zacarias', 'Elton'),
Fisica = c(91, 82, 75, 97, 62, 74),
Matematica = c(99, 100, 86, 92, 91, 87),
Quimica = c(56, 72, 49, 68, 59, 77))
View(escola)
# Calculando a média por aluno
escola$Media = NA
escola
escola$Media = apply(escola[, c(2,3,4)], 1, mean)
escola
mediageral = apply(escola[,c(2,3,4,5),2,mean])
mediageral = apply(escola[,c(2,3,4,5)],2,mean)
mediageral
Mediageral = c('Media',mediageral)
escola = rbind(escola,Mediageral)
escola
# tapply() # Vetores podem ser subdividios em diferentes subsets
tabela_basquete <-
data.frame(equipe = gl(5, 5, labels = paste("Equipe", LETTERS[1:5])),
jogador = sample(letters, 25),
num_cestas = floor(runif(25, min=0, max=50)))
# tapply() # Vetores podem ser subdividios em diferentes subsets
?gl
LETTERS
LETTERS[1:5]
letters
?runof
?floor
View(tabela_basquete)
?runif
plot(runif(n = 100, min = 5, max = 45))
hist(runif(n = 100, min = 5, max = 45))
hist(rnorm(n = 100, mean = 30, sd = 10))
hist(runif(n = 100, min = 5, max = 45))
hist(rnorm(n = 100, mean = 30, sd = 10))
tabela_basquete <-
data.frame(equipe = gl(5,5, labels = paste('Equipe', LETTERS[1:5]))
jogador = sample(letters, 25),
num_cestas = floor(runif(25,min=0,max=50)))
tabela_basquete <-
data.frame(equipe = gl(5,5, labels = paste('Equipe', LETTERS[1:5])),
jogador = sample(letters, 25),
num_cestas = floor(runif(25,min=0,max=50)))
tabela_basquete
# Como calcular o total de cestas por Equipe?
# Então o tapply() permite brincar com diferentes números de níveis?
?tapply()
tapply(X=tabela_basquete, INDEX = tabela_basquete$equipe, FUN = mean)
table(tabela_basquete)
table(tabela_basquete$equipe)
tapply(X=tabela_basquete$num_cestas, INDEX = tabela_basquete$equipe, FUN = mean)
# tapply() vs sqldf
install.package('sqldf')
# tapply() vs sqldf
install.packages('sqldf')
?sqldf
??sqldf
# tapply() vs sqldf
# install.packages('sqldf')
library(sqldf)
sqldf("SELECT equipe, SUM(num_cestas)
FROM tabela_basquete
GROUP BY equipe")
sqldf("SELECT equipe, MEAN(num_cestas)
FROM tabela_basquete
GROUP BY equipe")
sqldf("SELECT equipe, AVERAGE(num_cestas)
FROM tabela_basquete
GROUP BY equipe")
sqldf("SELECT equipe, AVG(num_cestas)
FROM tabela_basquete
GROUP BY equipe")
sqldf('SELECT equipe as Equipe, MAX(num_cestas) as Número de Cestas
FROM tabela_basquete
GROUP BY equipe')
sqldf('SELECT equipe as Equipe, MAX(num_cestas) as Num_Cestas
FROM tabela_basquete
GROUP BY equipe')
tapply(X = tabela_basquete$num_cestas, INDEX = tabela_basquete$equipe, FUN = sum)
tapply(X = tabela_basquete$num_cestas, INDEX = tabela_basquete$equipe, FUN = max)
# Mínimo
tapply(X = tabela_basquete$num_cestas, INDEX = tabela_basquete$equipe, FUN = min)
?by
data = iris
by(iris, INDICES = Petal.Length, FUN = mean)
View(data)
by(iris, INDICES = Species, FUN = mean)
by(iris, INDICES = levels(data$Species), FUN = mean)
levels(data$Species)
by(iris, INDICES = data$Species, FUN = mean)
mean_pl = mean(x$Petal.Length)
by(iris, INDICES = data$Species,
function(x) {
mean_pl = mean(x$Petal.Length)
})
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
data
names(data)
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
View(data)
View(tabela_basquete)
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
sqldf('SELECT AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM iris
GROUP BY Species')
sqldf("SELECT equipe, AVG(num_cestas)
FROM tabela_basquete
GROUP BY equipe")
names(data)
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
?by
?apply
mean_pl = c(apply(data[,c(1,2,3,4)], MARGIN = 2, FUN = mean))
source('C:/GD/DS/1Formacao/1BigDataAnalytics_R_Azure_ML/3-FatoresControleFuncoes/07-FamiliaApplyR.R', encoding = 'UTF-8', echo=TRUE)
by(iris, INDICES = data$Species,
function(x) {
mean_pl = c(apply(data[,c(1,2,3,4)], MARGIN = 2, FUN = mean))
})
by(iris, INDICES = data$Species,
function(x) {
mean_pl = c(data$Sepal.Length,data$Sepal.Width)
})
by(iris, INDICES = data$Species,
function(x) {
mean_pl = c(mean(data$Sepal.Length),mean(data$Sepal.Width))
})
by(iris, INDICES = data$Species,
function(x) {
mean_pl = mean(data$Sepal.Length)
})
View(data)
by(iris, INDICES = data$Species,
function(x) {
mean_pl <- mean(data$Sepal.Length)
})
by(iris, INDICES = as.factor(data$Species),
function(x) {
mean_pl <- mean(data$Sepal.Length)
})
levels(data$Species)
by(iris, INDICES = data$Species,
function(x) {
mean_pl <- mean(data$Petal.Length)
})
by(iris, INDICES = data$Species,
function(x) {
mean_pl <- mean(data$Petal.Length)
})
# novo dat
dat <- data.frame(species=c(rep(c(1,2,3), each=5)),
petal.length=c(rnorm(5, 4.5, 1),
rnorm(5, 4.5, 1),
rnorm(5, 5.5, 1)),
petal.width=c(rnorm(5, 2.5, 1),
rnorm(5, 2.5, 1),
rnorm(5, 4, 1)))
dat
str(data)
dat$species <- factor(dat$species)
View(dat)
by(dat, dat$species, function(x){
# calcular o comprimento médio da pétala para cada espécie
mean.pl <- mean(x$petal.length)
})
str(dat)
str(data)
data = iris
data$Species = factor(data$Species)
str(data)
levels(data$Species)
by(iris, INDICES = data$Species,
function(x) {
mean_pl <- mean(data$Petal.Length)
})
by(data, INDICES = data$Species,
function(x) {
mean_pl <- mean(data$Petal.Length)
})
by(data, data$Species,
function(x) {
mean_pl <- mean(data$Petal.Length)
})
by(data, data$Species, function(x) {
mean_pl <- mean(x$Petal.Length)
})
?apply
by(data, INDICES = data$Species,
function(x) { # LEMBRAR DE COLOXAR O X AQUI
mean_pl <- c(apply(x[1,2,3,4], #Aplicar a função média sobre esses dados
MARGIN = 2, # Média por coluna
FUN = mean) # Média
})
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
mean_pl <- c(apply(x[1,2,3,4], #Aplicar a função média sobre esses dados
MARGIN = 2, # Média por coluna
FUN = mean)) # Média
by(data, INDICES = data$Species,
function(x) { # LEMBRAR DE COLOXAR O X AQUI
mean_pl <- c(apply(x[1,2,3,4], #Aplicar a função média sobre esses dados
MARGIN = 2, # Média por coluna
FUN = mean)) # Média
})
by(data, INDICES = data$Species,
function(x) { # LEMBRAR DE COLOXAR O X AQUI
mean_pl <- apply(x[1,2,3,4], #Aplicar a função média sobre esses dados
MARGIN = 2, # Média por coluna
FUN = mean) # Média
})
by(data, data$Species, function(x) { # LEMBRAR DE COLOXAR O X AQUI
mean_pl <- sapply(x[,c(1,2,3,4)],mean) # E COLOCAR O X AQUI TAMBÉM!
})
by(data, data$Species, function(x) { # LEMBRAR DE COLOXAR O X AQUI
mean_pl <- apply(x[,c(1,2,3,4)],2,mean) # E COLOCAR O X AQUI TAMBÉM!
})
# vapply()
?vapply()
# Lista com dois elementos
lista1 = list(a = c(1:10), b=(45:77))
lista1
lapply(lista1, sum)
sapply(lista1, sum)
?vapply()
fivenum
?fivenum
?vapply()
vapply(lista1,
fivenum)
vapply(lista1,
fivenum)
vapply(x = lista1,
FUN = fivenum,
FUN.VALUE =
c('a' = .0,
'b' = .0,
'c' = .0,
'd' = .0,
'e' = .0))
vapply(X = lista1,
FUN = fivenum,
FUN.VALUE =
c('a' = .0,
'b' = .0,
'c' = .0,
'd' = .0,
'e' = .0))
vapply(X = lista1,
FUN = fivenum,
FUN.VALUE =
c('Min' = .0,
'1stQu' = .0,
'Median' = .0,
'3stQu' = .0,
'Max' = .0))
# replicate
?replicate
# replicate
?replicate(7, runif(1:10))
# replicate
replicate(7, runif(1:10))
#mapply()
mapply(rep, 1:4, 4:1)
?mapply
#mapply()
mapply(rep, 1:3, 4:1)
#mapply()
mapply(rep, 1:4, 3:1)
#mapply()
mapply(rep, 1:4, 4:1)
# rapply()
?rapply()
lista2 = list(a = c(1:5),
b = (6:10))
lista2
rapply(lista2, sum)
rapply(lista2, sum, how = 'list')
setwd('C:/GD/DS/1Formacao/1BigDataAnalytics_R_Azure_ML/09-IntroducaoAnaliseEstatistica2')
rm(list=ls())
attach(mtcars)
mtcars
View(mtcars)
plot(mpg ~ wt)
# Package ggpur
install.packages('ggpubr')
library('ggpubr')
ggscatter(mtcars, x = 'mpg', y = 'wt',
add = 'reg.line', conf.int = TRUE,
cor.coef = TRUE, cor.method = 'pearson',
xlab = 'Autonomia', ylab = 'Peso do Veículo')
cov(mtcars$mpg,mtcars$wt)
# Maior interpretabilidade no coeficiente de correlação
?cor
?cov
# Maior interpretabilidade no coeficiente de correlação
?cor
cor(mtcars$mpg, mtcars$wt)
setwd('C:/GD/DS/DS_Share/Coursera/RegressionModels/Week4/PoissonRegression')
load('data/gaData.rda')
data = gaData
View(data)
head(data)
plot(data$julian, data$visits, pch = 19, col = 'darkgrey', xlab = 'Julian', ylab = 'Visits')
plot(data$julian, data$visits, pch = 19, col = 'darkgrey', xlab = 'Julian', ylab = 'Visits')
View(data)
setwd('C:/GD/DS/DS_Share/Coursera/RegressionModels/Week4/PoissonRegression')
load('data/gaData.rda')
data = gaData
View(data)
data$julian = julian(data$date)
View(data)
head(data)
plot(data$julian, data$visits, pch = 19, col = 'darkgrey', xlab = 'Julian', ylab = 'Visits')
