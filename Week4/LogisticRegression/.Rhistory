swiss = mutate(swiss, CatholicBin = 1*(Catholic > 50))
swiss$CatholicBin = as.factor(swiss$CatholicBin)
#Plot data
library(tidyverse)
g = ggplot(swiss, aes(x = Agriculture, y = Fertility, colour = CatholicBin)) +
geom_point(size = 6, colour = 'black') + geom_point(size = 4) +
xlab('% in Agriculture') +
ylab('Fertility')
g
# So we can fit a model with Fertility as function of Agriculture and CatholicBin
fit = lm(Fertility ~ Agriculture, data = swiss)
#Extrair intercept and slope from this:
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1
#Adicionnando CatholicBin as independent, sem interacao
fit2 = lm(Fertility ~ Agriculture + CatholicBin, data = swiss)
g2 = g
g2 = g2 + geom_abline(intercept = coef(fit2)[1], slope = coef(fit2)[2], size = 2)
g2 = g2 + geom_abline(intercept = coef(fit2)[1] + coef(fit2)[3], slope = coef(fit2)[2], size = 2, colour = 'blue')
g2
coef(fit2)
coef(fit2)
# 1 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit = lm(mpg ~ cyl + wt, data = data)
summary(fit)
library(tidyverse)
# Da mudanca esperada de carros com cilindros de 4 e cilindros de 8, tem-se uma mudanca
#de -6,0709, a qual corresponde a diferenca de media entre os dois
g = ggplot(data = data, aes(y = mpg, x = cyl)) +
geom_point()
g2 = ggplot(data = data, aes(y = mpg, x = wt)) +
geom_point(aes(fill = cyl, color = cyl))
g2
# 2 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit2 = lm(mpg ~ cyl + wt, data = data)
summary(fit2)
coef(fit2)
# 1 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit = lm(mpg ~ cyl + wt, data = data)
summary(fit)
library(tidyverse)
# Da mudanca esperada de carros com cilindros de 4 e cilindros de 8, tem-se uma mudanca
#de -6,0709, a qual corresponde a diferenca de media entre os dois
g = ggplot(data = data, aes(y = mpg, x = cyl)) +
geom_point()
g2 = ggplot(data = data, aes(y = mpg, x = wt)) +
geom_point(aes(fill = cyl, color = cyl))
g2
# 2 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit2 = lm(mpg ~ cyl + wt, data = data)
summary(fit2)
g2 = g2 + geom_abline(intercept = coef(fit2)[1], slope = coef(fit2)[4], color = 'red')
g2 = g2 + geom_abline(intercept = coef(fit2)[1] + coef(fit2)[3], slope = coef(fit2)[4], color = 'blue')
g2
# 1 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit = lm(mpg ~ cyl + wt, data = data)
summary(fit)
library(tidyverse)
# Da mudanca esperada de carros com cilindros de 4 e cilindros de 8, tem-se uma mudanca
#de -6,0709, a qual corresponde a diferenca de media entre os dois
g = ggplot(data = data, aes(y = mpg, x = cyl)) +
geom_point()
g2 = ggplot(data = data, aes(y = mpg, x = wt)) +
geom_point(aes(fill = cyl, color = cyl))
g2
# 2 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit2 = lm(mpg ~ cyl + wt, data = data)
summary(fit2)
g2 = g2 + geom_abline(intercept = coef(fit2)[1], slope = coef(fit2)[4], color = 'red')
g2 = g2 + geom_abline(intercept = coef(fit2)[1] + coef(fit2)[2], slope = coef(fit2)[4], color = 'green')
g2 = g2 + geom_abline(intercept = coef(fit2)[1] + coef(fit2)[3], slope = coef(fit2)[4], color = 'blue')
g2
fit3 = lm(mpg ~ cyl, data = data)
coef(fit3)
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3[2]), color = 'red')
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3[3]), color = 'green')
g3 = ggplot(data = data, aes(y = mpg, x = cyl)) +
geom_point()
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3[2]), color = 'red')
g3 = ggplot(data = data, aes(y = mpg, x = cyl)) +
geom_point()
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3)[2], color = 'red')
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3)[3], color = 'green')
g3 = ggplot(data = data, aes(y = mpg, x = cyl)) +
geom_point()
g3
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3)[2], color = 'red')
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3)[3], color = 'green')
g3
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3)[2],slope = 0, color = 'red')
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3)[3], slope = 0, color = 'green')
g3
g3 = ggplot(data = data, aes(y = mpg, x = cyl)) +
geom_point()
g3
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3)[2],slope = 0, color = 'red')
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3)[3], slope = 0, color = 'green')
g3
g3 = ggplot(data = data, aes(y = mpg, x = cyl)) +
geom_point()
g3
g3 = g3 + geom_abline(intercept = coef(fit3)[1], slope = 0, color = 'black')
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3)[2],slope = 0, color = 'red')
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3)[3], slope = 0, color = 'green')
g3
# 1 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit = lm(mpg ~ cyl + wt, data = data)
summary(fit)
library(tidyverse)
# Da mudanca esperada de carros com cilindros de 4 e cilindros de 8, tem-se uma mudanca
#de -6,0709, a qual corresponde a diferenca de media entre os dois
g = ggplot(data = data, aes(y = mpg, x = cyl)) +
geom_point()
g2 = ggplot(data = data, aes(y = mpg, x = wt)) +
geom_point(aes(fill = cyl, color = cyl))
g2
# 2 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit2 = lm(mpg ~ cyl + wt, data = data)
summary(fit2)
g2 = g2 + geom_abline(intercept = coef(fit2)[1], slope = coef(fit2)[4], color = 'red')
g2 = g2 + geom_abline(intercept = coef(fit2)[1] + coef(fit2)[2], slope = coef(fit2)[4], color = 'green')
g2 = g2 + geom_abline(intercept = coef(fit2)[1] + coef(fit2)[3], slope = coef(fit2)[4], color = 'blue')
g2
fit2semreferencia = lm(mpg ~ I(cyl - 1) + wt, data = data)
fit2semreferencia = lm(mpg ~ wt + cyl - 1, data = data)
summary(fit2semreferencia)
summary(fit2)
summary(fit2semreferencia)
# 5
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatdata = data.frame(y = y , x = x)
ghat = ggplot(data = hatdata, aes(y = y, x = x)) +
geom_point()
ghat
hatfit = lm(y ~ x, data = hatdata)
hatvalues(hatfit)
dfbetas(fit)
dfbetas(hatfit)
library(datasets)
data(swiss)
head(swiss)
library(dplyr)
#Criar novas variaveis com a funcao mutate do dplyr
#Variavel binaria
swiss = mutate(swiss, CatholicBin = 1*(Catholic > 50))
swiss$CatholicBin = as.factor(swiss$CatholicBin)
#Plot data
library(tidyverse)
g = ggplot(swiss, aes(x = Agriculture, y = Fertility, colour = CatholicBin)) +
geom_point(size = 6, colour = 'black') + geom_point(size = 4) +
xlab('% in Agriculture') +
ylab('Fertility')
g
# So we can fit a model with Fertility as function of Agriculture and CatholicBin
fit = lm(Fertility ~ Agriculture, data = swiss)
#Extrair intercept and slope from this:
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1
#Adicionnando CatholicBin as independent, sem interacao
fit2 = lm(Fertility ~ Agriculture + CatholicBin, data = swiss)
g2 = g
g2 = g2 + geom_abline(intercept = coef(fit2)[1], slope = coef(fit2)[2], size = 2)
g2 = g2 + geom_abline(intercept = coef(fit2)[1] + coef(fit2)[3], slope = coef(fit2)[2], size = 2, colour = 'blue')
g2
#Com termo de interacao entre Agriculture e CatholicBin utilizamos a multiplicacao entre ambos
fit3 = lm(Fertility ~ Agriculture * CatholicBin, data = swiss)
g3 = g
g3 = g3 + geom_abline(intercept = coef(fit3)[1], slope = coef(fit3)[2], size = 2)
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3)[3], slope = coef(fit3)[2] + coef(fit3)[4], size = 2, colour = 'red')
g3
# 1 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit = lm(mpg ~ cyl + wt, data = data)
summary(fit)
library(tidyverse)
# Da mudanca esperada de carros com cilindros de 4 e cilindros de 8, tem-se uma mudanca
#de -6,0709, a qual corresponde a diferenca de media entre os dois
g = ggplot(data = data, aes(y = mpg, x = cyl)) +
geom_point()
g2 = ggplot(data = data, aes(y = mpg, x = wt)) +
geom_point(aes(fill = cyl, color = cyl))
g2
# 2 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit2 = lm(mpg ~ cyl + wt, data = data)
summary(fit2)
g2 = g2 + geom_abline(intercept = coef(fit2)[1], slope = coef(fit2)[4], color = 'red')
g2 = g2 + geom_abline(intercept = coef(fit2)[1] + coef(fit2)[2], slope = coef(fit2)[4], color = 'green')
g2 = g2 + geom_abline(intercept = coef(fit2)[1] + coef(fit2)[3], slope = coef(fit2)[4], color = 'blue')
g2
#Realizar o fit com o 4 sem ser a referencia, assim ele literalmente traz a media dos tres, muito lindo
fit2semreferencia = lm(mpg ~ wt + cyl - 1, data = data)
summary(fit2semreferencia)
fit3 = lm(mpg ~ cyl, data = data)
summary(fit3)
g3 = ggplot(data = data, aes(y = mpg, x = cyl)) +
geom_point()
g3
g3 = g3 + geom_abline(intercept = coef(fit3)[1], slope = 0, color = 'black')
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3)[2],slope = 0, color = 'red')
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3)[3], slope = 0, color = 'green')
g3
#Coloquei alternativa
# Holding weight constant, cylinder appears to have more of an impact on mpg than if weight is disregarded.
# 3 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit4 = lm(mpg ~ cyl + wt, data = data)
fit5 = lm(mpg ~ cyl*wt, data = data)
summary(fit4)
summary(fit5)
# 2 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit2 = lm(mpg ~ cyl + wt, data = data)
summary(fit2)
g2 = g2 + geom_abline(intercept = coef(fit2)[1], slope = coef(fit2)[4], color = 'red')
g2 = g2 + geom_abline(intercept = coef(fit2)[1] + coef(fit2)[2], slope = coef(fit2)[4], color = 'green')
g2 = g2 + geom_abline(intercept = coef(fit2)[1] + coef(fit2)[3], slope = coef(fit2)[4], color = 'blue')
g2
#Realizar o fit com o 4 sem ser a referencia, assim ele literalmente traz a media dos tres, muito lindo
fit2semreferencia = lm(mpg ~ wt + cyl - 1, data = data)
summary(fit2semreferencia)
fit3 = lm(mpg ~ cyl, data = data)
summary(fit3)
g3 = ggplot(data = data, aes(y = mpg, x = cyl)) +
geom_point()
g3
g3 = g3 + geom_abline(intercept = coef(fit3)[1], slope = 0, color = 'black')
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3)[2],slope = 0, color = 'red')
g3 = g3 + geom_abline(intercept = coef(fit3)[1] + coef(fit3)[3], slope = 0, color = 'green')
g3
# 2 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit2 = lm(mpg ~ cyl + wt, data = data)
summary(fit2)
#wt constante
fit3 = lm(mpg ~ cyl, data = data)
summary(fit3)
# 4
data = mtcars
data$cyl = as.factor(data$cyl)
fit6 = lm(mpg ~ I(wt * 0.5) + factor(cyl), data = data)
summary(fit6)
anova(fit4, fit5)
# 1 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit = lm(mpg ~ cyl + wt, data = data)
summary(fit)
library(tidyverse)
# Da mudanca esperada de carros com cilindros de 4 e cilindros de 8, tem-se uma mudanca
#de -6,0709, a qual corresponde a diferenca de media entre os dois
g = ggplot(data = data, aes(y = mpg, x = cyl)) +
geom_point()
g2 = ggplot(data = data, aes(y = mpg, x = wt)) +
geom_point(aes(fill = cyl, color = cyl))
g2
# 2 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit2 = lm(mpg ~ cyl + wt, data = data)
summary(fit2)
g2 = g2 + geom_abline(intercept = coef(fit2)[1], slope = coef(fit2)[4], color = 'red')
g2 = g2 + geom_abline(intercept = coef(fit2)[1] + coef(fit2)[2], slope = coef(fit2)[4], color = 'green')
g2 = g2 + geom_abline(intercept = coef(fit2)[1] + coef(fit2)[3], slope = coef(fit2)[4], color = 'blue')
g2
summary(fit2)
# 2 -----------------------------------------------------------------------
data = mtcars
data$cyl = as.factor(data$cyl)
fit2 = lm(mpg ~ cyl + wt, data = data)
summary(fit2)
summary(fit3)
download.file("https://dl.dropboxusercontent.com/u/7710864/data/ravensData.rda"
, destfile="./data/ravensData.rda",method="curl")
load("./data/ravensData.rda")
download.file("https://dl.dropboxusercontent.com/u/7710864/data/ravensData.rda"
, destfile="./data/ravensData.rda",method="curl")
setwd('C:/GD/DS/DS_Share/Coursera/RegressionModels/Week4')
load("dat/ravensData.rda")
setwd('C:/GD/DS/DS_Share/Coursera/RegressionModels/Week4')
load("data/ravensData.rda")
head(ravensData)
data = ravensData
summary(data)
View(data)
class(data)
write.csv(data)
?write.csv
write.csv(data, file = 'data/data.csv')
lmRavens = lm(data$ravenWinNum ~ data$ravenScore)
summary(lmRavens)
set(rm=list())
rm(list=ls())
x = seq(-10, 10, length = 1000)
manipulate(
y = (exp(beta0 + beta1*x)/(1 - exp(beta0 + beta1*x)))
plot(x, y, type = "l", lwd = 3, frame = FALSE)
beta1 = slider(-2, 2, step = .1, initial = 2)
beta0 = slider(-2, 2, step = .1, initial = 0)
)
manipulate(
manipulate(
y = (exp(beta0 + beta1*x))/(1 - exp(beta0 + beta1*x)))
manipulate(
y = (exp(beta0 + beta1*x))/(1 - exp(beta0 + beta1*x))
plot(x, y, type = "l", lwd = 3, frame = FALSE)
beta1 = slider(-2, 2, step = .1, initial = 2)
beta0 = slider(-2, 2, step = .1, initial = 0)
)
rm(list=ls())
x = seq(-10, 10, length = 1000)
manipulate(
y = (exp(beta0 + beta1*x))/(1 - exp(beta0 + beta1*x))
plot(x, y, type = "l", lwd = 3, frame = FALSE)
beta1 = slider(-2, 2, step = .1, initial = 2)
beta0 = slider(-2, 2, step = .1, initial = 0)
)
y = (exp(beta0 + beta1*x))/(1 - exp(beta0 + beta1*x)
plot(x, y, type = "l", lwd = 3, frame = FALSE)
beta1 = slider(-2, 2, step = .1, initial = 2)
beta0 = slider(-2, 2, step = .1, initial = 0)
)
manipulate(
y = (exp(beta0 + beta1*x))/(1 - exp(beta0 + beta1*x))
plot(x, y, type = "l", lwd = 3, frame = FALSE)
beta1 = slider(-2, 2, step = .1, initial = 2)
beta0 = slider(-2, 2, step = .1, initial = 0)
)
manipulate(
y = (exp(beta0 + beta1*x))/(1 - exp(beta0 + beta1*x))
plot(x, y, type = "l", lwd = 3, frame = FALSE)
beta1 = slider(-2, 2, step = .1, initial = 2)
beta0 = slider(-2, 2, step = .1, initial = 0)
)
manipulate(
plot(x, (exp(beta0 + beta1*x))/(1 - exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE)
beta1 = slider(-2, 2, step = .1, initial = 2)
beta0 = slider(-2, 2, step = .1, initial = 0)
)
manipulate(
plot(x,
exp(beta0 + beta1*x))(1 - exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE)
manipulate(
plot(x,
exp(beta0 + beta1*x)(1 - exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE)
beta1 = slider(-2, 2, step = .1, initial = 2)
beta0 = slider(-2, 2, step = .1, initial = 0)
)
manipulate(
plot(x,
exp(beta0 + beta1*x)(1 - exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE)
beta1 = slider(-2, 2, step = .1, initial = 2)
beta0 = slider(-2, 2, step = .1, initial = 0)
)
manipulate(
plot(x,
exp(beta0 + beta1*x)(1 - exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE)
beta1 = slider(-2, 2, step = .1, initial = 2),
beta0 = slider(-2, 2, step = .1, initial = 0)
)
manipulate(
plot(x,
exp(beta0 + beta1*x)(1 - exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2, 2, step = .1, initial = 2),
beta0 = slider(-2, 2, step = .1, initial = 0)
)
library(manipulate)
manipulate(
plot(x,
exp(beta0 + beta1*x)(1 - exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2, 2, step = .1, initial = 2),
beta0 = slider(-2, 2, step = .1, initial = 0)
)
install.packages('manipulate')
library(manipulate)
manipulate(
plot(x,
exp(beta0 + beta1*x)(1 - exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2, 2, step = .1, initial = 2),
beta0 = slider(-2, 2, step = .1, initial = 0)
)
x = seq(-10, 10, length = 1000)
library(manipulate)
manipulate(
plot(x,
exp(beta0 + beta1*x)(1 - exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2, 2, step = .1, initial = 2),
beta0 = slider(-2, 2, step = .1, initial = 0)
)
manipulate
?manipulate
x = seq(-10, 10, length = 1000)
library(manipulate)
manipulate(
plot(x,
exp(beta0 + beta1*x)/(1 - exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2, 2, step = .1, initial = 2),
beta0 = slider(-2, 2, step = .1, initial = 0)
)
x = seq(-10, 10, length = 1000)
library(manipulate)
manipulate(
plot(x,
exp(beta0 + beta1*x)/(1 + exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2, 2, step = .1, initial = 2),
beta0 = slider(-2, 2, step = .1, initial = 0)
)
a = c(-9,-7,-5,-3,-1,1,3,5,7,9)
b = c(0,0,0,1,0,1,0,1,1,1,1)
length(a)
length(b)
data = data.frame(x = a, y = b)
plot(a, b)
a = c(-9,-7,-5,-3,-1,1,3,5,7,9)
b = c(0,0,0,1,0,1,0,1,1,1,)
a = c(-9,-7,-5,-3,-1,1,3,5,7,9)
b = c(0,0,0,1,0,1,0,1,1,1)
plot(a, b)
manipulate(
plot(x,
exp(beta0 + beta1*x)/(1 + exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2, 2, step = .1, initial = 2),
beta0 = slider(-2, 2, step = .1, initial = 0)
)
rm(list=ls())
#Visualizing fitting regression curves
x = seq(-10, 10, length = 1000)
library(manipulate)
a = c(-9,-7,-5,-3,-1,1,3,5,7,9)
b = c(0,0,0,1,0,1,0,1,1,1)
plot(a, b)
manipulate(
plot(x,
exp(beta0 + beta1*x)/(1 + exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2, 2, step = .1, initial = 2),
beta0 = slider(-2, 2, step = .1, initial = 0)
)
plot(a, b)
par(new = TRUE)
manipulate(
plot(x,
exp(beta0 + beta1*x)/(1 + exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2, 2, step = .1, initial = 2),
beta0 = slider(-2, 2, step = .1, initial = 0)
)
manipulate(
plot(x,
exp(beta0 + beta1*x)/(1 + exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2, 2, step = .1, initial = 2),
beta0 = slider(-2, 2, step = .1, initial = 0)
)
manipulate(
plot(x,
exp(beta0 + beta1*x)/(1 + exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-5, 5, step = .1, initial = 2),
beta0 = slider(-5, 5, step = .1, initial = 0)
)
rm(list=ls())
setwd('C:/GD/DS/DS_Share/Coursera/RegressionModels/Week4')
load("data/ravensData.rda")
head(ravensData)
data = ravensData
lr = glm(data$ravenWinNum ~ data$ravenScore, family = 'binomial')
summary(lr)
lr$fitted.values
plot(data$ravenScore, lr$fitted.values,
pch = 19, col = 'blue',
xlab = 'Score', ylab = 'Prob Ravens Win')
exp(lr$coefficients)
exp(confint(lr))
#Anova
anova(lr, test = 'Chisq')
